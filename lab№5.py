import tkinter as tk
from tkinter import messagebox, ttk, filedialog, Toplevel
import json
import os
import shutil
from PIL import Image, ImageTk
import csv
import pickle

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
SAVE_FOLDER = "Yusypiv"
if not os.path.exists(SAVE_FOLDER):
    os.makedirs(SAVE_FOLDER)

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
TXT_FILE = os.path.join(SAVE_FOLDER, "artifacts.txt")
CSV_FILE = os.path.join(SAVE_FOLDER, "artifacts.csv")
BIN_FILE = os.path.join(SAVE_FOLDER, "artifacts.bin")

# –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å
class Artifact:
    def __init__(self, name, age, origin, material):
        self.name = name
        self.age = age
        self.origin = origin
        self.material = material

    def get_info(self):
        return f"–ù–∞–∑–≤–∞: {self.name}\n–í—ñ–∫: {self.age} —Ä–æ–∫—ñ–≤\n–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {self.origin}\n–ú–∞—Ç–µ—Ä—ñ–∞–ª: {self.material}"

# –ö–ª–∞—Å-–Ω–∞—â–∞–¥–æ–∫
class DetailedArtifact(Artifact):
    def __init__(self, name, age, origin, material, description, condition, category, discovery_day, status, image_path, original_image_name=""):
        super().__init__(name, age, origin, material)
        self.description = description
        self.condition = condition
        self.category = category
        self.discovery_day = discovery_day
        self.status = status
        self.image_path = image_path
        self.original_image_name = original_image_name

    def get_full_info(self):
        return (f"–ù–∞–∑–≤–∞: {self.name}\n–í—ñ–∫: {self.age} —Ä–æ–∫—ñ–≤\n–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {self.origin}\n"
                f"–ú–∞—Ç–µ—Ä—ñ–∞–ª: {self.material}\n–û–ø–∏—Å: {self.description}\n"
                f"–°—Ç–∞–Ω: {self.condition}\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {self.category}\n"
                f"–î–µ–Ω—å –≤–∏—è–≤–ª–µ–Ω–Ω—è: {self.discovery_day}\n–°—Ç–∞—Ç—É—Å: {self.status}")

    def to_dict(self):
        return {
            "name": self.name,
            "age": self.age,
            "origin": self.origin,
            "material": self.material,
            "description": self.description,
            "condition": self.condition,
            "category": self.category,
            "discovery_day": self.discovery_day,
            "status": self.status,
            "image_path": self.image_path,
            "original_image_name": self.original_image_name
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            data["name"], data["age"], data["origin"], data["material"],
            data["description"], data["condition"], data["category"],
            data["discovery_day"], data["status"], data.get("image_path", ""),
            data.get("original_image_name", "")
        )

# –ö–ª–∞—Å –¥–ª—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
class ArtifactApp:

    def clear_search_entry(self):
        self.search_entry.delete(0, tk.END)
        self.add_placeholder(None)

    def clear_filters(self):
        self.condition_var.set("–£—Å—ñ")
        self.category_var.set("–£—Å—ñ")
        self.day_var.set("–£—Å—ñ")
        self.status_var.set("–£—Å—ñ")
        self.search_info_label.config(text="")
        self.search_image_label.config(image="")

    def __init__(self, root):
        self.root = root
        self.root.title("–ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")
        self.root.geometry("1209x804")

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.used_image_names = []

        # –ö–µ—à –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        self.image_cache = {}

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TNotebook", background="#f0f0f0")
        style.configure("TFrame", background="#f0f0f0")
        style.configure("TLabel", background="#f0f0f0", foreground="#333333")
        style.configure("TButton", background="#d0d0d0", foreground="#333333")
        style.map("TButton", background=[("active", "#b0b0b0")])
        self.root.configure(bg="#f0f0f0")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.load_data()

        self.current_artifact_index = 0
        self.current_image = None

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ–∑ –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—à—É–∫"
        self.search_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.search_tab, text="–ü–æ—à—É–∫")

        # –í–∫–ª–∞–¥–∫–∞ "–ü–µ—Ä–µ–≥–ª—è–¥"
        self.browse_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.browse_tab, text="–ü–µ—Ä–µ–≥–ª—è–¥")

        # –í–∫–ª–∞–¥–∫–∞ "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤"
        self.add_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.add_tab, text="–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")

        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤"
        self.edit_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.edit_tab, text="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")

        # --- –í–∫–ª–∞–¥–∫–∞ "–ü–æ—à—É–∫" ---
        self.search_frame = tk.Frame(self.search_tab, bg="#f0f0f0", bd=2, relief="groove")
        self.search_frame.pack(fill=tk.X, padx=10, pady=5)
        tk.Label(self.search_frame, text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ –≤—ñ–∫:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(side=tk.LEFT, padx=5)
        self.search_entry = tk.Entry(self.search_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.insert(0, "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É")
        self.search_entry.config(fg="gray50")
        self.search_entry.bind("<FocusIn>", self.clear_placeholder)
        self.search_entry.bind("<FocusOut>", self.add_placeholder)
        ttk.Button(self.search_frame, text="–ü–æ—à—É–∫ üîç", command=self.search_artifact).pack(side=tk.LEFT, padx=5)
        ttk.Button(self.search_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ üóëÔ∏è", command=self.clear_search_entry).pack(side=tk.LEFT, padx=5)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏ "–ü–æ—à—É–∫"
        self.main_search_frame = tk.Frame(self.search_tab, bg="#f0f0f0")
        self.main_search_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (—Å–ª–µ–≤–∞)
        self.artifact_list_frame = tk.Frame(self.main_search_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.artifact_list_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)
        tk.Label(self.artifact_list_frame, text="–î–æ—Å—Ç—É–ø–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.artifact_listbox = tk.Listbox(self.artifact_list_frame, height=15, width=30, bg="#ffffff", fg="#333333", font=("Arial", 10))
        self.artifact_listbox.pack(pady=5)
        self.update_artifact_listbox()


        # –§–∏–ª—å—Ç—Ä—ã (—Å–ø—Ä–∞–≤–∞)
        self.filters_frame = tk.Frame(self.main_search_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.filters_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=5)

        tk.Label(self.filters_frame, text="–°—Ç–∞–Ω:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.condition_var = tk.StringVar(value="–£—Å—ñ")
        self.condition_menu = ttk.OptionMenu(self.filters_frame, self.condition_var, "–£—Å—ñ", *self.conditions)
        self.condition_menu.pack(pady=5)

        tk.Label(self.filters_frame, text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.category_var = tk.StringVar(value="–£—Å—ñ")
        self.category_menu = ttk.OptionMenu(self.filters_frame, self.category_var, "–£—Å—ñ", *self.categories)
        self.category_menu.pack(pady=5)

        tk.Label(self.filters_frame, text="–î–µ–Ω—å –≤–∏—è–≤–ª–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.day_var = tk.StringVar(value="–£—Å—ñ")
        self.day_menu = ttk.OptionMenu(self.filters_frame, self.day_var, "–£—Å—ñ", *self.days_of_week)
        self.day_menu.pack(pady=5)

        tk.Label(self.filters_frame, text="–°—Ç–∞—Ç—É—Å:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.status_var = tk.StringVar(value="–£—Å—ñ")
        self.status_menu = ttk.OptionMenu(self.filters_frame, self.status_var, "–£—Å—ñ", *self.statuses)
        self.status_menu.pack(pady=5)

        ttk.Button(self.filters_frame, text="–ü–æ—à—É–∫ üîç", command=self.filter_search).pack(pady=10)
        ttk.Button(self.filters_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ üóëÔ∏è", command=self.clear_filters).pack(pady=10)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å: —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        self.search_info_frame = tk.Frame(self.main_search_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.search_info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)

        self.search_image_label = tk.Label(self.search_info_frame, bg="#f0f0f0")
        self.search_image_label.pack(side=tk.LEFT, padx=10, pady=10)

        self.search_info_label = tk.Label(self.search_info_frame, text="", justify="left", bg="#f0f0f0", fg="#333333", font=("Arial", 12), wraplength=400)
        self.search_info_label.pack(side=tk.RIGHT, pady=10, padx=10, fill=tk.BOTH, expand=True)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ "–°—Ç–∞–Ω" –∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        self.manage_frame = tk.Frame(self.search_tab, bg="#f0f0f0", bd=2, relief="groove")
        self.manage_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Label(self.manage_frame, text="–ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.new_value_frame = tk.Frame(self.manage_frame, bg="#f0f0f0")
        self.new_value_frame.pack(pady=5)
        self.new_value_entry = tk.Entry(self.new_value_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.new_value_entry.pack(side=tk.LEFT, padx=5)
        ttk.Button(self.new_value_frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ø–∏—Å–∫–∏ üìã", command=self.show_lists).pack(side=tk.LEFT, padx=5)

        self.manage_buttons_frame = tk.Frame(self.manage_frame, bg="#f0f0f0")
        self.manage_buttons_frame.pack(fill=tk.BOTH, expand=True)

        self.condition_manage_frame = tk.LabelFrame(self.manage_buttons_frame, text="–°–¢–ê–ù", bg="#f0f0f0", fg="#333333", font=("Arial", 12, "bold"))
        self.condition_manage_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        ttk.Button(self.condition_manage_frame, text="–î–æ–¥–∞—Ç–∏ ‚ûï", command=self.add_to_conditions).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.condition_manage_frame, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚úèÔ∏è", command=self.edit_condition).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.condition_manage_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ üóëÔ∏è", command=self.delete_from_conditions).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.condition_manage_frame, text="–°–æ—Ä—Ç—É–≤–∞—Ç–∏ üî¢", command=self.sort_conditions).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.condition_manage_frame, text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ üîÑ", command=self.reverse_conditions).pack(pady=2, padx=5, fill=tk.X)

        self.category_manage_frame = tk.LabelFrame(self.manage_buttons_frame, text="–ö–ê–¢–ï–ì–û–†–Ü–Ø", bg="#f0f0f0", fg="#333333", font=("Arial", 12, "bold"))
        self.category_manage_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        ttk.Button(self.category_manage_frame, text="–î–æ–¥–∞—Ç–∏ ‚ûï", command=self.add_to_categories).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.category_manage_frame, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚úèÔ∏è", command=self.edit_category).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.category_manage_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ üóëÔ∏è", command=self.delete_from_categories).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.category_manage_frame, text="–°–æ—Ä—Ç—É–≤–∞—Ç–∏ üî¢", command=self.sort_categories).pack(pady=2, padx=5, fill=tk.X)
        ttk.Button(self.category_manage_frame, text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ üîÑ", command=self.reverse_categories).pack(pady=2, padx=5, fill=tk.X)

        # --- –í–∫–ª–∞–¥–∫–∞ "–ü–µ—Ä–µ–≥–ª—è–¥" ---
        self.browse_info_frame = tk.Frame(self.browse_tab, bg="#f0f0f0", bd=2, relief="groove")
        self.browse_info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É
        self.browse_index_label = tk.Label(self.browse_info_frame, text="", bg="#f0f0f0", fg="#333333", font=("Arial", 12))
        self.browse_index_label.pack(pady=5)

        self.browse_image_label = tk.Label(self.browse_info_frame, bg="#f0f0f0")
        self.browse_image_label.pack(side=tk.LEFT, padx=10, pady=10)

        self.browse_info_label = tk.Label(self.browse_info_frame, text="", justify="left", bg="#f0f0f0", fg="#333333", font=("Arial", 12), wraplength=400)
        self.browse_info_label.pack(side=tk.RIGHT, pady=10, padx=10, fill=tk.BOTH, expand=True)

        self.nav_frame = tk.Frame(self.browse_tab, bg="#f0f0f0")
        self.nav_frame.pack(pady=10)
        ttk.Button(self.nav_frame, text="–î–æ –ø–µ—Ä—à–æ–≥–æ ‚èÆÔ∏è", command=self.show_first_artifact).pack(side=tk.LEFT, padx=5)
        ttk.Button(self.nav_frame, text="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ‚¨ÖÔ∏è", command=self.show_prev_artifact).pack(side=tk.LEFT, padx=5)
        ttk.Button(self.nav_frame, text="–ù–∞—Å—Ç—É–ø–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ‚û°", command=self.show_next_artifact).pack(side=tk.LEFT, padx=5)
        ttk.Button(self.nav_frame, text="–î–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ‚è≠Ô∏è", command=self.show_last_artifact).pack(side=tk.LEFT, padx=5)

        # --- –í–∫–ª–∞–¥–∫–∞ "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤" ---
        self.add_main_frame = tk.Frame(self.add_tab, bg="#f0f0f0")
        self.add_main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.add_left_frame = tk.Frame(self.add_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.add_left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(self.add_left_frame, text="–í–∏–±—Ä–∞–Ω–∞ —Ñ–æ—Ç–æ:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_image_display_label = tk.Label(self.add_left_frame, bg="#f0f0f0")
        self.add_image_display_label.pack(pady=5)

        self.add_image_path = tk.StringVar(value="")
        self.add_image_label = tk.Label(self.add_left_frame, text="–§–æ—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ", bg="#f0f0f0", fg="#333333", font=("Arial", 12))
        self.add_image_label.pack(pady=5)
        ttk.Button(self.add_left_frame, text="–í–∏–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ üì∑", command=self.select_image).pack(pady=5)

        self.add_right_frame = tk.Frame(self.add_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.add_right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(self.add_right_frame, text="–ù–∞–∑–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_name_entry = tk.Entry(self.add_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.add_name_entry.pack(pady=5)

        tk.Label(self.add_right_frame, text="–í—ñ–∫ (—Ä–æ–∫—ñ–≤):", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_age_entry = tk.Entry(self.add_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.add_age_entry.pack(pady=5)

        tk.Label(self.add_right_frame, text="–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_origin_entry = tk.Entry(self.add_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.add_origin_entry.pack(pady=5)

        tk.Label(self.add_right_frame, text="–ú–∞—Ç–µ—Ä—ñ–∞–ª:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_material_entry = tk.Entry(self.add_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.add_material_entry.pack(pady=5)

        tk.Label(self.add_right_frame, text="–û–ø–∏—Å:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_description_entry = tk.Entry(self.add_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.add_description_entry.pack(pady=5)

        tk.Label(self.add_right_frame, text="–°—Ç–∞–Ω:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_condition_var = tk.StringVar(value=self.conditions[0] if self.conditions else "")
        self.add_condition_menu = ttk.OptionMenu(self.add_right_frame, self.add_condition_var, self.add_condition_var.get(), *self.conditions)
        self.add_condition_menu.pack(pady=5)

        tk.Label(self.add_right_frame, text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_category_var = tk.StringVar(value=self.categories[0] if self.categories else "")
        self.add_category_menu = ttk.OptionMenu(self.add_right_frame, self.add_category_var, self.add_category_var.get(), *self.categories)
        self.add_category_menu.pack(pady=5)

        tk.Label(self.add_right_frame, text="–î–µ–Ω—å –≤–∏—è–≤–ª–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_day_var = tk.StringVar(value=self.days_of_week[0] if self.days_of_week else "")
        self.add_day_menu = ttk.OptionMenu(self.add_right_frame, self.add_day_var, self.add_day_var.get(), *self.days_of_week)
        self.add_day_menu.pack(pady=5)

        tk.Label(self.add_right_frame, text="–°—Ç–∞—Ç—É—Å:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.add_status_var = tk.StringVar(value=self.statuses[0] if self.statuses else "")
        self.add_status_menu = ttk.OptionMenu(self.add_right_frame, self.add_status_var, self.add_status_var.get(), *self.statuses)
        self.add_status_menu.pack(pady=5)

        self.add_bottom_frame = tk.Frame(self.add_tab, bg="#f0f0f0")
        self.add_bottom_frame.pack(fill=tk.X, padx=10, pady=5)
        ttk.Button(self.add_bottom_frame, text="–î–æ–¥–∞—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ‚ûï", command=self.add_artifact).pack(pady=10)

        # --- –í–∫–ª–∞–¥–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤" ---
        self.edit_main_frame = tk.Frame(self.edit_tab, bg="#f0f0f0")
        self.edit_main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.edit_left_frame = tk.Frame(self.edit_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.edit_left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(self.edit_left_frame, text="–í–∏–±—Ä–∞–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_artifact_listbox = tk.Listbox(self.edit_left_frame, height=15, width=30, bg="#ffffff", fg="#333333", font=("Arial", 10))
        self.edit_artifact_listbox.pack(pady=5)
        self.update_edit_artifact_listbox()
        self.edit_artifact_listbox.bind("<<ListboxSelect>>", self.on_edit_artifact_select)

        self.edit_image_display_label = tk.Label(self.edit_left_frame, bg="#f0f0f0")
        self.edit_image_display_label.pack(pady=5)

        self.edit_image_path = tk.StringVar(value="")
        self.edit_image_label = tk.Label(self.edit_left_frame, text="–§–æ—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ", bg="#f0f0f0", fg="#333333", font=("Arial", 12))
        self.edit_image_label.pack(pady=5)
        ttk.Button(self.edit_left_frame, text="–í–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ üì∑", command=self.select_edit_image).pack(pady=5)

        self.edit_right_frame = tk.Frame(self.edit_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.edit_right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(self.edit_right_frame, text="–ù–∞–∑–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_name_entry = tk.Entry(self.edit_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.edit_name_entry.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–í—ñ–∫ (—Ä–æ–∫—ñ–≤):", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_age_entry = tk.Entry(self.edit_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.edit_age_entry.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_origin_entry = tk.Entry(self.edit_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.edit_origin_entry.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–ú–∞—Ç–µ—Ä—ñ–∞–ª:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_material_entry = tk.Entry(self.edit_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.edit_material_entry.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–û–ø–∏—Å:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_description_entry = tk.Entry(self.edit_right_frame, width=30, font=("Arial", 12), bg="#ffffff", fg="#333333")
        self.edit_description_entry.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–°—Ç–∞–Ω:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_condition_var = tk.StringVar(value=self.conditions[0] if self.conditions else "")
        self.edit_condition_menu = ttk.OptionMenu(self.edit_right_frame, self.edit_condition_var, self.edit_condition_var.get(), *self.conditions)
        self.edit_condition_menu.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_category_var = tk.StringVar(value=self.categories[0] if self.categories else "")
        self.edit_category_menu = ttk.OptionMenu(self.edit_right_frame, self.edit_category_var, self.edit_category_var.get(), *self.categories)
        self.edit_category_menu.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–î–µ–Ω—å –≤–∏—è–≤–ª–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_day_var = tk.StringVar(value=self.days_of_week[0] if self.days_of_week else "")
        self.edit_day_menu = ttk.OptionMenu(self.edit_right_frame, self.edit_day_var, self.edit_day_var.get(), *self.days_of_week)
        self.edit_day_menu.pack(pady=5)

        tk.Label(self.edit_right_frame, text="–°—Ç–∞—Ç—É—Å:", bg="#f0f0f0", fg="#333333", font=("Arial", 12)).pack(pady=5)
        self.edit_status_var = tk.StringVar(value=self.statuses[0] if self.statuses else "")
        self.edit_status_menu = ttk.OptionMenu(self.edit_right_frame, self.edit_status_var, self.edit_status_var.get(), *self.statuses)
        self.edit_status_menu.pack(pady=5)

        self.edit_bottom_frame = tk.Frame(self.edit_tab, bg="#f0f0f0")
        self.edit_bottom_frame.pack(fill=tk.X, padx=10, pady=5)
        ttk.Button(self.edit_bottom_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ üíæ", command=self.save_artifact_changes).pack(pady=10)

        # –í–∫–ª–∞–¥–∫–∞ "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤"
        self.delete_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.delete_tab, text="–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")

        self.delete_main_frame = tk.Frame(self.delete_tab, bg="#f0f0f0")
        self.delete_main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.delete_left_frame = tk.Frame(self.delete_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.delete_left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)

        tk.Label(self.delete_left_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", bg="#f0f0f0", fg="#333333",
                 font=("Arial", 12)).pack(pady=5)
        self.delete_artifact_listbox = tk.Listbox(self.delete_left_frame, height=15, width=30, bg="#ffffff",
                                                  fg="#333333", font=("Arial", 10))
        self.delete_artifact_listbox.pack(pady=5)
        self.update_delete_artifact_listbox()

        self.delete_image_display_label = tk.Label(self.delete_left_frame, bg="#f0f0f0")
        self.delete_image_display_label.pack(pady=5)

        self.delete_artifact_listbox.bind("<<ListboxSelect>>", self.on_delete_artifact_select)

        self.delete_right_frame = tk.Frame(self.delete_main_frame, bg="#f0f0f0", bd=2, relief="groove")
        self.delete_right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)

        self.delete_info_label = tk.Label(self.delete_right_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π",
                                          justify="left", bg="#f0f0f0", fg="#333333", font=("Arial", 12),
                                          wraplength=400)
        self.delete_info_label.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        self.delete_bottom_frame = tk.Frame(self.delete_tab, bg="#f0f0f0")
        self.delete_bottom_frame.pack(fill=tk.X, padx=10, pady=5)
        ttk.Button(self.delete_bottom_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç üóëÔ∏è", command=self.delete_artifact).pack(pady=10)

        self.current_artifact = None
        self.show_artifact()

        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)


    def load_data(self):
        if os.path.exists(BIN_FILE):
            try:
                with open(BIN_FILE, "rb") as f:
                    data = pickle.load(f)
                    self.conditions = data.get("conditions", ["–í—ñ–¥–º—ñ–Ω–Ω–∏–π", "–î–æ–±—Ä–∏–π", "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π", "–ü–æ–≥–∞–Ω–∏–π"])
                    self.categories = data.get("categories", ["–†–µ–ª—ñ–∫–≤—ñ—è", "–°–∫–∞—Ä–±", "–î–æ–∫—É–º–µ–Ω—Ç", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞"])
                    self.days_of_week = tuple(data.get("days_of_week", ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]))
                    self.statuses = tuple(data.get("statuses", ["–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "–£ —Å—Ö–æ–≤–∏—â—ñ", "–ù–∞ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—ó", "–í—Ç—Ä–∞—á–µ–Ω–∏–π"]))
                    self.max_list_size = data.get("max_list_size", 10)
                    self.artifacts = []
                    for artifact_data in data.get("artifacts", []):
                        try:
                            age = str(artifact_data["age"]).replace(" ", "")
                            artifact_data["age"] = age
                            self.artifacts.append(DetailedArtifact.from_dict(artifact_data))
                            if "original_image_name" in artifact_data:
                                self.used_image_names.append(artifact_data["original_image_name"])
                        except ValueError:
                            print(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ —É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ {artifact_data['name']}, –≤—ñ–∫: {artifact_data['age']}")
                    return
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {e}")

        if os.path.exists(CSV_FILE):
            try:
                with open(CSV_FILE, newline='', encoding="utf-8") as f:
                    reader = csv.DictReader(f)
                    self.artifacts = []
                    for row in reader:
                        self.artifacts.append(DetailedArtifact(
                            row["name"], row["age"], row["origin"], row["material"],
                            row["description"], row["condition"], row["category"],
                            row["discovery_day"], row["status"], row["image_path"],
                            row.get("original_image_name", "")
                        ))
                        if row.get("original_image_name"):
                            self.used_image_names.append(row["original_image_name"])
                if os.path.exists("artifacts-lab5.json"):
                    with open("artifacts-lab5.json", "r", encoding="utf-8") as f:
                        data = json.load(f)
                        self.conditions = data.get("conditions", ["–í—ñ–¥–º—ñ–Ω–Ω–∏–π", "–î–æ–±—Ä–∏–π", "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π", "–ü–æ–≥–∞–Ω–∏–π"])
                        self.categories = data.get("categories", ["–†–µ–ª—ñ–∫–≤—ñ—è", "–°–∫–∞—Ä–±", "–î–æ–∫—É–º–µ–Ω—Ç", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞"])
                        self.days_of_week = tuple(data.get("days_of_week", ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]))
                        self.statuses = tuple(data.get("statuses", ["–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "–£ —Å—Ö–æ–≤–∏—â—ñ", "–ù–∞ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—ó", "–í—Ç—Ä–∞—á–µ–Ω–∏–π"]))
                        self.max_list_size = data.get("max_list_size", 10)
                return
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ CSV-—Ñ–∞–π–ª—É: {e}")

        if os.path.exists(TXT_FILE):
            try:
                with open(TXT_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    self.artifacts = []
                    artifact_data = {}
                    for line in lines:
                        line = line.strip()
                        if line == "-----------------------------------------------------":
                            if artifact_data:
                                self.artifacts.append(DetailedArtifact(
                                    artifact_data["name"], artifact_data["age"], artifact_data["origin"],
                                    artifact_data["material"], artifact_data["description"], artifact_data["condition"],
                                    artifact_data["category"], artifact_data["discovery_day"], artifact_data["status"],
                                    artifact_data["image_path"], artifact_data.get("original_image_name", "")
                                ))
                                if "original_image_name" in artifact_data:
                                    self.used_image_names.append(artifact_data["original_image_name"])
                            artifact_data = {}
                        else:
                            key, value = line.split(": ", 1)
                            artifact_data[key] = value
                if os.path.exists("artifacts-lab5.json"):
                    with open("artifacts-lab5.json", "r", encoding="utf-8") as f:
                        data = json.load(f)
                        self.conditions = data.get("conditions", ["–í—ñ–¥–º—ñ–Ω–Ω–∏–π", "–î–æ–±—Ä–∏–π", "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π", "–ü–æ–≥–∞–Ω–∏–π"])
                        self.categories = data.get("categories", ["–†–µ–ª—ñ–∫–≤—ñ—è", "–°–∫–∞—Ä–±", "–î–æ–∫—É–º–µ–Ω—Ç", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞"])
                        self.days_of_week = tuple(data.get("days_of_week", ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]))
                        self.statuses = tuple(data.get("statuses", ["–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "–£ —Å—Ö–æ–≤–∏—â—ñ", "–ù–∞ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—ó", "–í—Ç—Ä–∞—á–µ–Ω–∏–π"]))
                        self.max_list_size = data.get("max_list_size", 10)
                return
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: {e}")

        self.conditions = ["–í—ñ–¥–º—ñ–Ω–Ω–∏–π", "–î–æ–±—Ä–∏–π", "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π", "–ü–æ–≥–∞–Ω–∏–π"]
        self.categories = ["–†–µ–ª—ñ–∫–≤—ñ—è", "–°–∫–∞—Ä–±", "–î–æ–∫—É–º–µ–Ω—Ç", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞"]
        self.days_of_week = ("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è")
        self.statuses = ("–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "–£ —Å—Ö–æ–≤–∏—â—ñ", "–ù–∞ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—ó", "–í—Ç—Ä–∞—á–µ–Ω–∏–π")
        self.max_list_size = 10
        self.artifacts = [
            DetailedArtifact("–ú–∞—Å–∫–∞ –¢—É—Ç–∞–Ω—Ö–∞–º–æ–Ω–∞", "3300", "–°—Ç–∞—Ä–æ–¥–∞–≤–Ω—ñ–π –Ñ–≥–∏–ø–µ—Ç", "–ó–æ–ª–æ—Ç–æ, –ª–∞–∑—É—Ä–∏—Ç, –±—ñ—Ä—é–∑–∞",
                             "–ó–æ–ª–æ—Ç–∞ –ø–æ—Ö–æ—Ä–æ–Ω–Ω–∞ –º–∞—Å–∫–∞ —Ñ–∞—Ä–∞–æ–Ω–∞", "–í—ñ–¥–º—ñ–Ω–Ω–∏–π", "–†–µ–ª—ñ–∫–≤—ñ—è", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "images//artifact1.jpg"),
            DetailedArtifact("–ö–∞–º—ñ–Ω—å –†–æ–∑–µ—Ç—Ç–∏", "2250", "–°—Ç–∞—Ä–æ–¥–∞–≤–Ω—ñ–π –Ñ–≥–∏–ø–µ—Ç", "–ì—Ä–∞–Ω—ñ—Ç",
                             "–ö–ª—é—á –¥–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∏ —î–≥–∏–ø–µ—Ç—Å—å–∫–∏—Ö —ñ—î—Ä–æ–≥–ª—ñ—Ñ—ñ–≤", "–î–æ–±—Ä–∏–π", "–î–æ–∫—É–º–µ–Ω—Ç", "–°–µ—Ä–µ–¥–∞", "–ù–∞ –≤–∏—Å—Ç–∞–≤—Ü—ñ", "images//artifact2.jpg"),
            DetailedArtifact("–¢–µ—Ä–∞–∫–æ—Ç–æ–≤–∞ –∞—Ä–º—ñ—è", "2200", "–°—Ç–∞—Ä–æ–¥–∞–≤–Ω—ñ–π –ö–∏—Ç–∞–π", "–ì–ª–∏–Ω–∞",
                             "–ê—Ä–º—ñ—è –≥–ª–∏–Ω—è–Ω–∏—Ö –≤–æ—ó–Ω—ñ–≤ —ñ–º–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞", "–ü'—è—Ç–Ω–∏—Ü—è", "–£ —Å—Ö–æ–≤–∏—â—ñ", "images//artifact3.jpg")
        ]

    def save_data(self):
        data = {
            "conditions": self.conditions,
            "categories": self.categories,
            "days_of_week": list(self.days_of_week),
            "statuses": list(self.statuses),
            "max_list_size": self.max_list_size,
            "artifacts": [artifact.to_dict() for artifact in self.artifacts]
        }
        with open("artifacts-lab5.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

        with open(TXT_FILE, "w", encoding="utf-8") as f:
            for artifact in self.artifacts:
                f.write(f"–ù–∞–∑–≤–∞: {artifact.name}\n")
                f.write(f"–í—ñ–∫: {artifact.age}\n")
                f.write(f"–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {artifact.origin}\n")
                f.write(f"–ú–∞—Ç–µ—Ä—ñ–∞–ª: {artifact.material}\n")
                f.write(f"–û–ø–∏—Å: {artifact.description}\n")
                f.write(f"–°—Ç–∞–Ω: {artifact.condition}\n")
                f.write(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {artifact.category}\n")
                f.write(f"–î–µ–Ω—å –≤–∏—è–≤–ª–µ–Ω–Ω—è: {artifact.discovery_day}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: {artifact.status}\n")
                f.write(f"–®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {artifact.image_path}\n")
                f.write(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {artifact.original_image_name}\n")
                f.write("-----------------------------------------------------\n")

        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            fieldnames = ["name", "age", "origin", "material", "description", "condition", "category", "discovery_day", "status", "image_path", "original_image_name"]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for artifact in self.artifacts:
                writer.writerow(artifact.to_dict())

        with open(BIN_FILE, "wb") as f:
            pickle.dump(data, f)

    def on_closing(self):
        self.save_data()
        self.root.destroy()

    def update_artifact_listbox(self):
        self.artifact_listbox.delete(0, tk.END)
        for artifact in self.artifacts:
            self.artifact_listbox.insert(tk.END, f"{artifact.name} ({artifact.age} —Ä–æ–∫—ñ–≤)")

    def update_edit_artifact_listbox(self):
        self.edit_artifact_listbox.delete(0, tk.END)
        for artifact in self.artifacts:
            self.edit_artifact_listbox.insert(tk.END, f"{artifact.name} ({artifact.age} —Ä–æ–∫—ñ–≤)")

    def load_image(self, image_path):
        if not image_path:
            return None
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ —î –≤ –∫–µ—à—ñ
        if image_path in self.image_cache:
            return self.image_cache[image_path]
        try:
            image = Image.open(image_path)
            image = image.resize((200, 200), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(image)
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫–µ—à
            self.image_cache[image_path] = photo
            return photo
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            return None

    def get_next_artifact_name(self):
        max_number = 3
        for artifact in self.artifacts:
            image_name = os.path.basename(artifact.image_path) if artifact.image_path else ""
            if image_name.startswith("artifact") and image_name.endswith(".jpg"):
                try:
                    number = int(image_name[len("artifact"):-len(".jpg")])
                    max_number = max(max_number, number)
                except ValueError:
                    continue
        return f"artifact{max_number + 1}"

    def select_image(self):
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.gif *.bmp")]
        )
        if file_path:
            original_image_name = os.path.basename(file_path)
            if original_image_name in self.used_image_names:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–§–æ—Ç–æ –∑ —ñ–º'—è–º {original_image_name} –≤–∂–µ –¥–æ–¥–∞–Ω–æ!")
                return

            self.add_image_path.set(file_path)
            self.add_image_label.config(text=f"–í–∏–±—Ä–∞–Ω–æ: {original_image_name}")
            photo = self.load_image(file_path)
            if photo:
                self.add_image_display_label.config(image=photo)
                self.add_image_display_label.image = photo
            else:
                self.add_image_display_label.config(image="")
        else:
            self.add_image_label.config(text="–§–æ—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
            self.add_image_display_label.config(image="")

    def select_edit_image(self):
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.gif *.bmp")]
        )
        if file_path:
            original_image_name = os.path.basename(file_path)
            if original_image_name in self.used_image_names and original_image_name != self.artifacts[self.edit_artifact_listbox.curselection()[0]].original_image_name:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–§–æ—Ç–æ –∑ —ñ–º'—è–º {original_image_name} –≤–∂–µ –¥–æ–¥–∞–Ω–æ!")
                return

            self.edit_image_path.set(file_path)
            self.edit_image_label.config(text=f"–í–∏–±—Ä–∞–Ω–æ: {original_image_name}")
            photo = self.load_image(file_path)
            if photo:
                self.edit_image_display_label.config(image=photo)
                self.edit_image_display_label.image = photo
            else:
                self.edit_image_display_label.config(image="")
        else:
            self.edit_image_label.config(text="–§–æ—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
            self.edit_image_display_label.config(image="")

    def add_artifact(self):
        name = self.add_name_entry.get().strip()
        age = self.add_age_entry.get().strip()
        origin = self.add_origin_entry.get().strip()
        material = self.add_material_entry.get().strip()
        description = self.add_description_entry.get().strip()
        condition = self.add_condition_var.get()
        category = self.add_category_var.get()
        discovery_day = self.add_day_var.get()
        status = self.add_status_var.get()
        image_path = self.add_image_path.get()

        if not name or not age or not origin or not material or not description:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è!")
            return
        if not image_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É!")
            return
        if not age.isdigit() or int(age) <= 0:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º!")
            return
        if len(name) > 100:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return

        for artifact in self.artifacts:
            if artifact.name.lower() == name.lower():
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!")
                return

        image_name = self.get_next_artifact_name()
        if not os.path.exists("images"):
            os.makedirs("images")
        new_image_path = os.path.join("images", f"{image_name}.jpg")
        try:
            shutil.copy(image_path, new_image_path)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            return

        original_image_name = os.path.basename(image_path)
        self.used_image_names.append(original_image_name)

        new_artifact = DetailedArtifact(
            name, age, origin, material, description,
            condition, category, discovery_day, status, new_image_path,
            original_image_name
        )

        self.artifacts.append(new_artifact)
        self.update_artifact_listbox()
        self.update_edit_artifact_listbox()
        self.update_delete_artifact_listbox()
        self.save_data()

        self.add_name_entry.delete(0, tk.END)
        self.add_age_entry.delete(0, tk.END)
        self.add_origin_entry.delete(0, tk.END)
        self.add_material_entry.delete(0, tk.END)
        self.add_description_entry.delete(0, tk.END)
        self.add_condition_var.set(self.conditions[0] if self.conditions else "")
        self.add_category_var.set(self.categories[0] if self.categories else "")
        self.add_day_var.set(self.days_of_week[0] if self.days_of_week else "")
        self.add_status_var.set(self.statuses[0] if self.statuses else "")
        self.add_image_path.set("")
        self.add_image_label.config(text="–§–æ—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        self.add_image_display_label.config(image="")

        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç {name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

    def on_edit_artifact_select(self, event):
        if not self.edit_artifact_listbox.curselection():
            return
        index = self.edit_artifact_listbox.curselection()[0]
        artifact = self.artifacts[index]

        self.edit_name_entry.delete(0, tk.END)
        self.edit_name_entry.insert(0, artifact.name)
        self.edit_age_entry.delete(0, tk.END)
        self.edit_age_entry.insert(0, artifact.age)
        self.edit_origin_entry.delete(0, tk.END)
        self.edit_origin_entry.insert(0, artifact.origin)
        self.edit_material_entry.delete(0, tk.END)
        self.edit_material_entry.insert(0, artifact.material)
        self.edit_description_entry.delete(0, tk.END)
        self.edit_description_entry.insert(0, artifact.description)
        self.edit_condition_var.set(artifact.condition)
        self.edit_category_var.set(artifact.category)
        self.edit_day_var.set(artifact.discovery_day)
        self.edit_status_var.set(artifact.status)
        self.edit_image_path.set(artifact.image_path)
        self.edit_image_label.config(text=f"–í–∏–±—Ä–∞–Ω–æ: {artifact.original_image_name}")
        photo = self.load_image(artifact.image_path)
        if photo:
            self.edit_image_display_label.config(image=photo)
            self.edit_image_display_label.image = photo
        else:
            self.edit_image_display_label.config(image="")

    def save_artifact_changes(self):
        if not self.edit_artifact_listbox.curselection():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!")
            return

        index = self.edit_artifact_listbox.curselection()[0]
        artifact = self.artifacts[index]

        name = self.edit_name_entry.get().strip()
        age = self.edit_age_entry.get().strip()
        origin = self.edit_origin_entry.get().strip()
        material = self.edit_material_entry.get().strip()
        description = self.edit_description_entry.get().strip()
        condition = self.edit_condition_var.get()
        category = self.edit_category_var.get()
        discovery_day = self.edit_day_var.get()
        status = self.edit_status_var.get()
        image_path = self.edit_image_path.get()

        if not name or not age or not origin or not material or not description:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è!")
            return
        if not image_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É!")
            return
        if not age.isdigit() or int(age) <= 0:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º!")
            return
        if len(name) > 100:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return

        for i, art in enumerate(self.artifacts):
            if i != index and art.name.lower() == name.lower():
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!")
                return

        # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
        if image_path != artifact.image_path:
            image_name = self.get_next_artifact_name()
            new_image_path = os.path.join("images", f"{image_name}.jpg")
            try:
                shutil.copy(image_path, new_image_path)
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                return
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É
            if artifact.image_path in self.image_cache:
                del self.image_cache[artifact.image_path]
            # –û–Ω–æ–≤–ª—é—î–º–æ —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            artifact.image_path = new_image_path
            artifact.original_image_name = os.path.basename(image_path)
            self.used_image_names.remove(artifact.original_image_name)
            self.used_image_names.append(artifact.original_image_name)

        artifact.name = name
        artifact.age = age
        artifact.origin = origin
        artifact.material = material
        artifact.description = description
        artifact.condition = condition
        artifact.category = category
        artifact.discovery_day = discovery_day
        artifact.status = status

        self.update_artifact_listbox()
        self.update_edit_artifact_listbox()
        self.save_data()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç {name} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!")

    def add_to_conditions(self):
        new_value = self.new_value_entry.get().strip()
        if not new_value:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è!")
            return
        if len(new_value) > 50:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return
        if len(self.conditions) >= self.max_list_size:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—ñ–≤ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç ({self.max_list_size})!")
            return
        if new_value not in self.conditions:
            self.conditions.append(new_value)
            self.condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.condition_var.set(v))
            self.add_condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.add_condition_var.set(v))
            self.edit_condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.edit_condition_var.set(v))
            self.new_value_entry.delete(0, tk.END)
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–¶–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É!")

    def add_to_categories(self):
        new_value = self.new_value_entry.get().strip()
        if not new_value:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è!")
            return
        if len(new_value) > 50:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return
        if len(self.categories) >= self.max_list_size:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç ({self.max_list_size})!")
            return
        if new_value not in self.categories:
            self.categories.append(new_value)
            self.category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.category_var.set(v))
            self.add_category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.add_category_var.set(v))
            self.edit_category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.edit_category_var.set(v))
            self.new_value_entry.delete(0, tk.END)
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–¶–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É!")

    def edit_condition(self):
        if self.condition_var.get() == "–£—Å—ñ":
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!")
            return
        new_value = self.new_value_entry.get().strip()
        if not new_value:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è!")
            return
        if len(new_value) > 50:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return
        old_value = self.condition_var.get()
        index = self.conditions.index(old_value)
        self.conditions[index] = new_value
        self.condition_menu["menu"].delete(old_value)
        self.condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.condition_var.set(v))
        self.add_condition_menu["menu"].delete(old_value)
        self.add_condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.add_condition_var.set(v))
        self.edit_condition_menu["menu"].delete(old_value)
        self.edit_condition_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.edit_condition_var.set(v))
        self.condition_var.set(new_value)
        for artifact in self.artifacts:
            if artifact.condition == old_value:
                artifact.condition = new_value
        if self.current_artifact and self.current_artifact.condition == old_value:
            self.current_artifact.condition = new_value
            self.update_info_labels()

    def edit_category(self):
        if self.category_var.get() == "–£—Å—ñ":
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!")
            return
        new_value = self.new_value_entry.get().strip()
        if not new_value:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è!")
            return
        if len(new_value) > 50:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª—ñ–≤)!")
            return
        old_value = self.category_var.get()
        index = self.categories.index(old_value)
        self.categories[index] = new_value
        self.category_menu["menu"].delete(old_value)
        self.category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.category_var.set(v))
        self.add_category_menu["menu"].delete(old_value)
        self.add_category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.add_category_var.set(v))
        self.edit_category_menu["menu"].delete(old_value)
        self.edit_category_menu["menu"].add_command(label=new_value, command=lambda v=new_value: self.edit_category_var.set(v))
        self.category_var.set(new_value)
        for artifact in self.artifacts:
            if artifact.category == old_value:
                artifact.category = new_value
        if self.current_artifact and self.current_artifact.category == old_value:
            self.current_artifact.category = new_value
            self.update_info_labels()

    def delete_from_conditions(self):
        if self.condition_var.get() == "–£—Å—ñ":
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return
        value = self.condition_var.get()
        for artifact in self.artifacts:
            if artifact.condition == value:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–¶–µ–π —Å—Ç–∞–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö!")
                return
        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞–Ω '{value}'?"):
            return
        self.conditions.remove(value)
        self.condition_menu["menu"].delete(value)
        self.add_condition_menu["menu"].delete(value)
        self.edit_condition_menu["menu"].delete(value)
        self.condition_var.set("–£—Å—ñ")
        self.add_condition_var.set(self.conditions[0] if self.conditions else "")

    def delete_from_categories(self):
        if self.category_var.get() == "–£—Å—ñ":
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return
        value = self.category_var.get()
        for artifact in self.artifacts:
            if artifact.category == value:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–¶—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö!")
                return
        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{value}'?"):
            return
        self.categories.remove(value)
        self.category_menu["menu"].delete(value)
        self.add_category_menu["menu"].delete(value)
        self.edit_category_menu["menu"].delete(value)
        self.category_var.set("–£—Å—ñ")
        self.add_category_var.set(self.categories[0] if self.categories else "")

    def sort_conditions(self):
        self.conditions.sort()
        self.condition_menu["menu"].delete(0, tk.END)
        self.condition_menu["menu"].add_command(label="–£—Å—ñ", command=lambda: self.condition_var.set("–£—Å—ñ"))
        for condition in self.conditions:
            self.condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.condition_var.set(v))
        self.add_condition_menu["menu"].delete(0, tk.END)
        for condition in self.conditions:
            self.add_condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.add_condition_var.set(v))
        self.edit_condition_menu["menu"].delete(0, tk.END)
        for condition in self.conditions:
            self.edit_condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.edit_condition_var.set(v))
        self.condition_var.set("–£—Å—ñ")
        self.add_condition_var.set(self.conditions[0] if self.conditions else "")

    def sort_categories(self):
        self.categories.sort()
        self.category_menu["menu"].delete(0, tk.END)
        self.category_menu["menu"].add_command(label="–£—Å—ñ", command=lambda: self.category_var.set("–£—Å—ñ"))
        for category in self.categories:
            self.category_menu["menu"].add_command(label=category, command=lambda v=category: self.category_var.set(v))
        self.add_category_menu["menu"].delete(0, tk.END)
        for category in self.categories:
            self.add_category_menu["menu"].add_command(label=category, command=lambda v=category: self.add_category_var.set(v))
        self.edit_category_menu["menu"].delete(0, tk.END)
        for category in self.categories:
            self.edit_category_menu["menu"].add_command(label=category, command=lambda v=category: self.edit_category_var.set(v))
        self.category_var.set("–£—Å—ñ")
        self.add_category_var.set(self.categories[0] if self.categories else "")

    def reverse_conditions(self):
        self.conditions.reverse()
        self.condition_menu["menu"].delete(0, tk.END)
        self.condition_menu["menu"].add_command(label="–£—Å—ñ", command=lambda: self.condition_var.set("–£—Å—ñ"))
        for condition in self.conditions:
            self.condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.condition_var.set(v))
        self.add_condition_menu["menu"].delete(0, tk.END)
        for condition in self.conditions:
            self.add_condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.add_condition_var.set(v))
        self.edit_condition_menu["menu"].delete(0, tk.END)
        for condition in self.conditions:
            self.edit_condition_menu["menu"].add_command(label=condition, command=lambda v=condition: self.edit_condition_var.set(v))
        self.condition_var.set("–£—Å—ñ")
        self.add_condition_var.set(self.conditions[0] if self.conditions else "")

    def reverse_categories(self):
        self.categories.reverse()
        self.category_menu["menu"].delete(0, tk.END)
        self.category_menu["menu"].add_command(label="–£—Å—ñ", command=lambda: self.category_var.set("–£—Å—ñ"))
        for category in self.categories:
            self.category_menu["menu"].add_command(label=category, command=lambda v=category: self.category_var.set(v))
        self.add_category_menu["menu"].delete(0, tk.END)
        for category in self.categories:
            self.add_category_menu["menu"].add_command(label=category, command=lambda v=category: self.add_category_var.set(v))
        self.edit_category_menu["menu"].delete(0, tk.END)
        for category in self.categories:
            self.edit_category_menu["menu"].add_command(label=category, command=lambda v=category: self.edit_category_var.set(v))
        self.category_var.set("–£—Å—ñ")
        self.add_category_var.set(self.categories[0] if self.categories else "")

    def clear_placeholder(self, event):
        if self.search_entry.get() == "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É":
            self.search_entry.delete(0, tk.END)
            self.search_entry.config(fg="#333333")

    def add_placeholder(self, event):
        if not self.search_entry.get():
            self.search_entry.insert(0, "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É")
            self.search_entry.config(fg="gray50")

    def update_info_labels(self):
        if self.current_artifact:
            self.search_info_label.config(text=self.current_artifact.get_full_info())
            self.browse_info_label.config(text=self.current_artifact.get_full_info())
            self.current_image = self.load_image(self.current_artifact.image_path)
            if self.current_image:
                self.browse_image_label.config(image=self.current_image)
            else:
                self.browse_image_label.config(image="")

    def search_artifact(self):
        query = self.search_entry.get().strip().lower()
        if not query or query == "–≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É":
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É!")
            return

        if query.isdigit():
            try:
                age = int(query)
                if age <= 0:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í—ñ–∫ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º!")
                    return
            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–∫—É!")
                return
        else:
            if len(query) > 100:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª—ñ–≤)!")
                return

        matching_artifacts = []
        for artifact in self.artifacts:
            matches_query = query == artifact.name.lower() or query == artifact.age
            if matches_query:
                matching_artifacts.append(artifact)

        if matching_artifacts:
            result_text = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏:\n\n"
            for artifact in matching_artifacts:
                result_text += artifact.get_full_info()
            self.search_info_label.config(text=result_text)

            self.current_image = self.load_image(matching_artifacts[0].image_path)
            if self.current_image:
                self.search_image_label.config(image=self.current_image)
            else:
                self.search_image_label.config(image="")
        else:
            self.search_info_label.config(text="–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            self.search_image_label.config(image="")

    def filter_search(self):
        selected_condition = self.condition_var.get()
        selected_category = self.category_var.get()
        selected_day = self.day_var.get()
        selected_status = self.status_var.get()

        filters_used = (
            selected_condition != "–£—Å—ñ" or
            selected_category != "–£—Å—ñ" or
            selected_day != "–£—Å—ñ" or
            selected_status != "–£—Å—ñ"
        )

        if not filters_used:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ñ—ñ–ª—å—Ç—Ä!")
            return

        matching_artifacts = []
        for artifact in self.artifacts:
            matches_condition = selected_condition == "–£—Å—ñ" or artifact.condition == selected_condition
            matches_category = selected_category == "–£—Å—ñ" or artifact.category == selected_category
            matches_day = selected_day == "–£—Å—ñ" or artifact.discovery_day == selected_day
            matches_status = selected_status == "–£—Å—ñ" or artifact.status == selected_status

            if matches_condition and matches_category and matches_day and matches_status:
                matching_artifacts.append(artifact)

        if matching_artifacts:
            result_text = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏:\n\n"
            for artifact in matching_artifacts:
                result_text += artifact.get_full_info() + "\n" + "-"*50 + "\n"
            self.search_info_label.config(text=result_text)

            self.current_image = self.load_image(matching_artifacts[0].image_path)
            if self.current_image:
                self.search_image_label.config(image=self.current_image)
            else:
                self.search_image_label.config(image="")
        else:
            self.search_info_label.config(text="–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            self.search_image_label.config(image="")

    def show_artifact(self):
        if not self.artifacts:
            self.browse_info_label.config(text="–ù–µ–º–∞—î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            self.browse_image_label.config(image="")
            self.browse_index_label.config(text="")
            return
        self.current_artifact = self.artifacts[self.current_artifact_index]
        self.browse_info_label.config(text=self.current_artifact.get_full_info())
        self.current_image = self.load_image(self.current_artifact.image_path)
        if self.current_image:
            self.browse_image_label.config(image=self.current_image)
        else:
            self.browse_image_label.config(image="")
        self.browse_index_label.config(text=f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç {self.current_artifact_index + 1} –∑ {len(self.artifacts)}")

    def show_next_artifact(self):
        if not self.artifacts:
            return
        if self.current_artifact_index >= len(self.artifacts) - 1:
            return
        self.current_artifact_index += 1
        self.show_artifact()

    def show_prev_artifact(self):
        if not self.artifacts:
            return
        if self.current_artifact_index <= 0:
            return
        self.current_artifact_index -= 1
        self.show_artifact()

    def show_first_artifact(self):
        if not self.artifacts:
            return
        self.current_artifact_index = 0
        self.show_artifact()

    def show_last_artifact(self):
        if not self.artifacts:
            return
        self.current_artifact_index = len(self.artifacts) - 1
        self.show_artifact()

    def show_lists(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤
        lists_window = Toplevel(self.root)
        lists_window.title("–°–ø–∏—Å–∫–∏ —Å—Ç–∞–Ω—ñ–≤ —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

        # –†–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞
        window_width = 400
        window_height = 400

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –µ–∫—Ä–∞–Ω—É
        screen_width = lists_window.winfo_screenwidth()
        screen_height = lists_window.winfo_screenheight()

        # –û–±—á–∏—Å–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä—É –µ–∫—Ä–∞–Ω—É
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ –ø–æ–∑–∏—Ü—ñ—é –≤—ñ–∫–Ω–∞
        lists_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤
        lists_frame = tk.Frame(lists_window, bg="#f0f0f0")
        lists_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—ñ–≤
        conditions_frame = tk.LabelFrame(lists_frame, text="–°–¢–ê–ù–ò", bg="#f0f0f0", fg="#333333",
                                         font=("Arial", 12, "bold"))
        conditions_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        conditions_listbox = tk.Listbox(conditions_frame, height=5, bg="#ffffff", fg="#333333", font=("Arial", 10))
        conditions_listbox.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        for condition in self.conditions:
            conditions_listbox.insert(tk.END, condition)

        # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        categories_frame = tk.LabelFrame(lists_frame, text="–ö–ê–¢–ï–ì–û–†–Ü–á", bg="#f0f0f0", fg="#333333",
                                         font=("Arial", 12, "bold"))
        categories_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        categories_listbox = tk.Listbox(categories_frame, height=5, bg="#ffffff", fg="#333333", font=("Arial", 10))
        categories_listbox.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        for category in self.categories:
            categories_listbox.insert(tk.END, category)

    def update_delete_artifact_listbox(self):
        self.delete_artifact_listbox.delete(0, tk.END)
        for artifact in self.artifacts:
            self.delete_artifact_listbox.insert(tk.END, f"{artifact.name} ({artifact.age} —Ä–æ–∫—ñ–≤)")

    def on_delete_artifact_select(self, event):
        if not self.delete_artifact_listbox.curselection():
            return
        index = self.delete_artifact_listbox.curselection()[0]
        artifact = self.artifacts[index]

        self.delete_info_label.config(text=artifact.get_full_info())
        photo = self.load_image(artifact.image_path)
        if photo:
            self.delete_image_display_label.config(image=photo)
            self.delete_image_display_label.image = photo
        else:
            self.delete_image_display_label.config(image="")

    def delete_artifact(self):
        if not self.delete_artifact_listbox.curselection():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return

        index = self.delete_artifact_listbox.curselection()[0]
        artifact = self.artifacts[index]

        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç '{artifact.name}'?"):
            return

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
        if artifact.image_path and os.path.exists(artifact.image_path):
            try:
                os.remove(artifact.image_path)
            except Exception as e:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É
        if artifact.image_path in self.image_cache:
            del self.image_cache[artifact.image_path]

        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö
        if artifact.original_image_name in self.used_image_names:
            self.used_image_names.remove(artifact.original_image_name)

        # –í–∏–¥–∞–ª—è—î–º–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∑—ñ —Å–ø–∏—Å–∫—É
        self.artifacts.pop(index)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —Å–ø–∏—Å–∫–∏
        self.update_artifact_listbox()
        self.update_edit_artifact_listbox()
        self.update_delete_artifact_listbox()

        # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.delete_info_label.config(text="–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π")
        self.delete_image_display_label.config(image="")

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if self.current_artifact_index >= len(self.artifacts) and self.artifacts:
            self.current_artifact_index = len(self.artifacts) - 1
        elif not self.artifacts:
            self.current_artifact_index = 0
        self.show_artifact()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ —É —Ñ–∞–π–ª–∏
        self.save_data()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç '{artifact.name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")

if __name__ == "__main__":
        root = tk.Tk()
        app = ArtifactApp(root)
        root.mainloop()